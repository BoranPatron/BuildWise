#!/usr/bin/env python3
"""
Datenbank-Migration: Archivierungsfelder f√ºr Milestones
- F√ºgt archived_by Spalte hinzu (Wer hat archiviert)
- F√ºgt archive_reason Spalte hinzu (Grund f√ºr Archivierung)
"""

import sqlite3
import os
from pathlib import Path

def run_migration():
    # Finde die Datenbankdatei
    db_path = Path("instance") / "buildwise.db"
    if not db_path.exists():
        db_path = Path("buildwise.db")
    
    if not db_path.exists():
        print("‚ùå Datenbankdatei nicht gefunden!")
        return False
    
    print(f"üîç Verwende Datenbank: {db_path}")
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # 1. Pr√ºfe aktuelle Spalten der milestones Tabelle
        cursor.execute("PRAGMA table_info(milestones)")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]
        
        print(f"üìã Aktuelle Spalten: {column_names}")
        
        # 2. F√ºge archived_by Spalte hinzu (falls nicht vorhanden)
        if 'archived_by' not in column_names:
            print("‚ûï F√ºge archived_by Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE milestones 
                ADD COLUMN archived_by VARCHAR(100)
            """)
            print("‚úÖ archived_by Spalte hinzugef√ºgt")
        else:
            print("‚è≠Ô∏è archived_by Spalte bereits vorhanden")
        
        # 3. F√ºge archive_reason Spalte hinzu (falls nicht vorhanden)
        if 'archive_reason' not in column_names:
            print("‚ûï F√ºge archive_reason Spalte hinzu...")
            cursor.execute("""
                ALTER TABLE milestones 
                ADD COLUMN archive_reason TEXT
            """)
            print("‚úÖ archive_reason Spalte hinzugef√ºgt")
        else:
            print("‚è≠Ô∏è archive_reason Spalte bereits vorhanden")
        
        # 4. Commit der √Ñnderungen
        conn.commit()
        
        # 5. Pr√ºfe finale Spalten
        cursor.execute("PRAGMA table_info(milestones)")
        updated_columns = cursor.fetchall()
        
        print("\nüìã Finale Spalten der milestones Tabelle:")
        for col in updated_columns:
            col_name = col[1]
            col_type = col[2]
            is_nullable = "NULL" if col[3] == 0 else "NOT NULL"
            default_val = f" DEFAULT {col[4]}" if col[4] is not None else ""
            print(f"   - {col_name}: {col_type} {is_nullable}{default_val}")
        
        # 6. Pr√ºfe ob archived_by und archive_reason vorhanden sind
        final_columns = [col[1] for col in updated_columns]
        
        if 'archived_by' in final_columns and 'archive_reason' in final_columns:
            print("\n‚úÖ Migration erfolgreich abgeschlossen!")
            print("üìù Neue Features verf√ºgbar:")
            print("   - archived_by: Speichert wer das Gewerk archiviert hat")
            print("   - archive_reason: Speichert den Grund f√ºr die Archivierung")
            return True
        else:
            print("\n‚ùå Migration fehlgeschlagen - Spalten nicht gefunden!")
            return False
            
    except Exception as e:
        print(f"‚ùå Fehler bei der Migration: {e}")
        return False
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ Starte Migration: Archivierungsfelder f√ºr Milestones")
    success = run_migration()
    if success:
        print("\nüéâ Migration erfolgreich abgeschlossen!")
    else:
        print("\nüí• Migration fehlgeschlagen!")
