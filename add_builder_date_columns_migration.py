#!/usr/bin/env python3
"""
Migration: Add builder preferred date range columns to resources table
Diese Migration f√ºgt Spalten hinzu, um den gew√ºnschten Zeitraum des Bautr√§gers zu speichern.
"""
import sqlite3
import os
from datetime import datetime

def add_builder_date_columns():
    db_path = "buildwise.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Datenbank {db_path} nicht gefunden")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîÑ Starte Migration: Builder Preferred Date Range Columns")
        print("=" * 60)
        
        # Pr√ºfe ob die Spalten bereits existieren
        cursor.execute("PRAGMA table_info(resources)")
        existing_columns = [col[1] for col in cursor.fetchall()]
        
        new_columns = [
            ("builder_preferred_start_date", "DATETIME", "Gew√ºnschtes Startdatum des Bautr√§gers"),
            ("builder_preferred_end_date", "DATETIME", "Gew√ºnschtes Enddatum des Bautr√§gers"),
            ("builder_date_range_notes", "TEXT", "Notizen zum gew√ºnschten Zeitraum")
        ]
        
        added_columns = []
        
        for column_name, column_type, description in new_columns:
            if column_name not in existing_columns:
                try:
                    alter_sql = f"ALTER TABLE resources ADD COLUMN {column_name} {column_type}"
                    cursor.execute(alter_sql)
                    added_columns.append(column_name)
                    print(f"‚úÖ Spalte '{column_name}' hinzugef√ºgt ({description})")
                except Exception as e:
                    print(f"‚ùå Fehler beim Hinzuf√ºgen der Spalte '{column_name}': {e}")
            else:
                print(f"‚ÑπÔ∏è  Spalte '{column_name}' existiert bereits")
        
        # Commit der √Ñnderungen
        conn.commit()
        
        # Pr√ºfe das neue Schema
        print("\nüìã Aktualisiertes Schema der 'resources' Tabelle:")
        print("=" * 60)
        cursor.execute("PRAGMA table_info(resources)")
        columns = cursor.fetchall()
        
        for col in columns:
            cid, name, type_, notnull, dflt_value, pk = col
            if name in [col[0] for col in new_columns]:
                print(f"{cid:2d} | {name:30s} | {type_:15s} | {'NOT NULL' if notnull else 'NULL':8s} | {str(dflt_value) if dflt_value else 'None':10s} | {'PK' if pk else ''} ‚≠ê NEU")
            else:
                print(f"{cid:2d} | {name:30s} | {type_:15s} | {'NOT NULL' if notnull else 'NULL':8s} | {str(dflt_value) if dflt_value else 'None':10s} | {'PK' if pk else ''}")
        
        conn.close()
        
        if added_columns:
            print(f"\n‚úÖ Migration erfolgreich abgeschlossen!")
            print(f"   {len(added_columns)} neue Spalten hinzugef√ºgt: {', '.join(added_columns)}")
        else:
            print(f"\n‚ÑπÔ∏è  Keine neuen Spalten hinzugef√ºgt (alle existieren bereits)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Migration: {e}")
        return False

if __name__ == "__main__":
    success = add_builder_date_columns()
    if success:
        print("\nüéâ Migration erfolgreich!")
    else:
        print("\nüí• Migration fehlgeschlagen!")
