#!/usr/bin/env python3
"""
Pr√ºft akzeptierte Angebote, f√ºr die noch keine Geb√ºhren erstellt wurden
"""

import sys
import os
import asyncio

# F√ºge das Projektverzeichnis zum Python-Pfad hinzu
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def check_accepted_quotes():
    """Pr√ºft akzeptierte Angebote ohne Geb√ºhren"""
    
    print("üîç Pr√ºfe akzeptierte Angebote ohne Geb√ºhren")
    print("=" * 50)
    
    try:
        from app.core.database import get_db
        from app.models.quote import Quote, QuoteStatus
        from app.models.buildwise_fee import BuildWiseFee
        from sqlalchemy import select
        
        async for db in get_db():
            # Hole alle akzeptierten Angebote
            accepted_quotes_query = select(Quote).where(Quote.status == QuoteStatus.ACCEPTED)
            accepted_quotes_result = await db.execute(accepted_quotes_query)
            accepted_quotes = accepted_quotes_result.scalars().all()
            
            print(f"üìä Gefundene akzeptierte Angebote: {len(accepted_quotes)}")
            
            if len(accepted_quotes) == 0:
                print("‚ö†Ô∏è Keine akzeptierten Angebote gefunden!")
                print("üí° Tipp: Erstellen Sie zuerst Angebote und akzeptieren Sie sie")
                return
            
            # Zeige alle akzeptierten Angebote
            for i, quote in enumerate(accepted_quotes):
                print(f"\nüìã Angebot {i+1}:")
                print(f"  - ID: {quote.id}")
                print(f"  - Projekt: {quote.project_id}")
                print(f"  - Kostenposition: {quote.cost_position_id}")
                print(f"  - Betrag: {quote.total_amount}‚Ç¨")
                print(f"  - Status: {quote.status}")
                print(f"  - Erstellt: {quote.created_at}")
            
            # Pr√ºfe f√ºr jedes Angebot, ob bereits eine Geb√ºhr existiert
            print(f"\nüîç Pr√ºfe Geb√ºhren f√ºr akzeptierte Angebote...")
            
            for quote in accepted_quotes:
                # Pr√ºfe ob bereits eine Geb√ºhr f√ºr dieses Angebot existiert
                existing_fee_query = select(BuildWiseFee).where(
                    BuildWiseFee.quote_id == quote.id,
                    BuildWiseFee.cost_position_id == quote.cost_position_id
                )
                existing_fee_result = await db.execute(existing_fee_query)
                existing_fee = existing_fee_result.scalar_one_or_none()
                
                if existing_fee:
                    print(f"  ‚úÖ Angebot {quote.id}: Geb√ºhr bereits erstellt (ID: {existing_fee.id}, Betrag: {existing_fee.fee_amount}‚Ç¨)")
                else:
                    print(f"  ‚ùå Angebot {quote.id}: Keine Geb√ºhr erstellt!")
                    print(f"     - Projekt: {quote.project_id}")
                    print(f"     - Kostenposition: {quote.cost_position_id}")
                    print(f"     - Angebotsbetrag: {quote.total_amount}‚Ç¨")
            
            # Z√§hle Angebote ohne Geb√ºhren
            quotes_without_fees = 0
            for quote in accepted_quotes:
                existing_fee_query = select(BuildWiseFee).where(
                    BuildWiseFee.quote_id == quote.id,
                    BuildWiseFee.cost_position_id == quote.cost_position_id
                )
                existing_fee_result = await db.execute(existing_fee_query)
                existing_fee = existing_fee_result.scalar_one_or_none()
                
                if not existing_fee:
                    quotes_without_fees += 1
            
            print(f"\nüìä Zusammenfassung:")
            print(f"  - Akzeptierte Angebote: {len(accepted_quotes)}")
            print(f"  - Angebote ohne Geb√ºhren: {quotes_without_fees}")
            
            if quotes_without_fees > 0:
                print(f"\nüí° L√∂sung: Erstellen Sie Geb√ºhren f√ºr {quotes_without_fees} Angebote")
                print("   F√ºhren Sie aus: python create_fees_for_accepted_quotes.py")
            else:
                print(f"\n‚úÖ Alle akzeptierten Angebote haben bereits Geb√ºhren!")
            
            break
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler beim Pr√ºfen: {e}")
        import traceback
        traceback.print_exc()
        return False

async def create_fees_for_accepted_quotes():
    """Erstellt Geb√ºhren f√ºr alle akzeptierten Angebote ohne Geb√ºhren"""
    
    print("üîß Erstelle Geb√ºhren f√ºr akzeptierte Angebote")
    print("=" * 50)
    
    try:
        from app.core.database import get_db
        from app.models.quote import Quote, QuoteStatus
        from app.models.buildwise_fee import BuildWiseFee
        from app.services.buildwise_fee_service import BuildWiseFeeService
        from sqlalchemy import select
        
        async for db in get_db():
            # Hole alle akzeptierten Angebote
            accepted_quotes_query = select(Quote).where(Quote.status == QuoteStatus.ACCEPTED)
            accepted_quotes_result = await db.execute(accepted_quotes_query)
            accepted_quotes = accepted_quotes_result.scalars().all()
            
            print(f"üìä Gefundene akzeptierte Angebote: {len(accepted_quotes)}")
            
            if len(accepted_quotes) == 0:
                print("‚ö†Ô∏è Keine akzeptierten Angebote gefunden!")
                return
            
            created_fees = 0
            
            for quote in accepted_quotes:
                # Pr√ºfe ob bereits eine Geb√ºhr f√ºr dieses Angebot existiert
                existing_fee_query = select(BuildWiseFee).where(
                    BuildWiseFee.quote_id == quote.id,
                    BuildWiseFee.cost_position_id == quote.cost_position_id
                )
                existing_fee_result = await db.execute(existing_fee_query)
                existing_fee = existing_fee_result.scalar_one_or_none()
                
                if not existing_fee:
                    try:
                        # Erstelle Geb√ºhr f√ºr dieses Angebot
                        fee = await BuildWiseFeeService.create_fee_from_quote(
                            db=db,
                            quote_id=quote.id,
                            cost_position_id=quote.cost_position_id
                        )
                        print(f"  ‚úÖ Geb√ºhr erstellt f√ºr Angebot {quote.id}: ID={fee.id}, Betrag={fee.fee_amount}‚Ç¨")
                        created_fees += 1
                    except Exception as e:
                        print(f"  ‚ùå Fehler beim Erstellen der Geb√ºhr f√ºr Angebot {quote.id}: {e}")
                else:
                    print(f"  ‚è≠Ô∏è Angebot {quote.id}: Geb√ºhr bereits vorhanden (ID: {existing_fee.id})")
            
            print(f"\nüìä Zusammenfassung:")
            print(f"  - Akzeptierte Angebote: {len(accepted_quotes)}")
            print(f"  - Neue Geb√ºhren erstellt: {created_fees}")
            
            if created_fees > 0:
                print(f"\n‚úÖ {created_fees} Geb√ºhren erfolgreich erstellt!")
            else:
                print(f"\n‚ÑπÔ∏è Keine neuen Geb√ºhren erstellt (alle bereits vorhanden)")
            
            break
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen der Geb√ºhren: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Hauptfunktion"""
    print("üîß Pr√ºfe akzeptierte Angebote und Geb√ºhren")
    print("=" * 60)
    
    # 1. Pr√ºfe akzeptierte Angebote
    await check_accepted_quotes()
    
    # 2. Frage nach Erstellung von Geb√ºhren
    print("\nüí° M√∂chten Sie Geb√ºhren f√ºr akzeptierte Angebote erstellen?")
    choice = input("Erstellen? (j/n): ").strip().lower()
    
    if choice in ["j", "ja", "y", "yes"]:
        await create_fees_for_accepted_quotes()
    else:
        print("‚ÑπÔ∏è Keine Geb√ºhren erstellt")

if __name__ == "__main__":
    asyncio.run(main()) 