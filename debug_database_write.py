#!/usr/bin/env python3
"""
√úberpr√ºft Datenbank-Schreibvorg√§nge und Debug-Logs
"""

import requests
import json
import sqlite3
import os
import time

def debug_database_write():
    """√úberpr√ºft Datenbank-Schreibvorg√§nge"""
    print("üîç DATENBANK-SCHREIBVORG√ÑNGE DEBUG")
    print("=" * 40)
    
    base_url = "http://localhost:8000"
    
    # Admin-Token (m√∂glicherweise abgelaufen)
    headers = {
        "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBidWlsZHdpc2UuZGUiLCJleHAiOjE3NTI5NDY2OTh9.QybsYBe-4RUGdICzDAplsIzxmuaDGHTLMp5_k3YfKNA",
        "Content-Type": "application/json"
    }
    
    print("\nüìä BACKEND-VERF√úGBARKEIT:")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Backend erreichbar")
        else:
            print("   ‚ùå Backend nicht erreichbar")
            return
    except Exception as e:
        print(f"   ‚ùå Backend-Fehler: {e}")
        return
    
    print("\nüóÑÔ∏è DATENBANK-VORHER:")
    db_path = "buildwise.db"
    if os.path.exists(db_path):
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        try:
            # Projekte pr√ºfen
            cursor.execute("SELECT COUNT(*) FROM projects")
            projects_count = cursor.fetchone()[0]
            print(f"   üìä Projekte in DB: {projects_count}")
            
            # Users pr√ºfen
            cursor.execute("SELECT COUNT(*) FROM users")
            users_count = cursor.fetchone()[0]
            print(f"   üë§ Users in DB: {users_count}")
            
            # Milestones pr√ºfen
            cursor.execute("SELECT COUNT(*) FROM milestones")
            milestones_count = cursor.fetchone()[0]
            print(f"   üéØ Milestones in DB: {milestones_count}")
            
            # Quotes pr√ºfen
            cursor.execute("SELECT COUNT(*) FROM quotes")
            quotes_count = cursor.fetchone()[0]
            print(f"   üí∞ Quotes in DB: {quotes_count}")
            
        except Exception as e:
            print(f"   ‚ùå Datenbank-Fehler: {e}")
        finally:
            conn.close()
    else:
        print("   ‚ùå Datenbank nicht gefunden")
    
    print("\nüîê BACKEND-API TEST:")
    try:
        response = requests.get(f"{base_url}/api/v1/projects/", headers=headers)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            projects = response.json()
            print(f"   üìä Backend gibt {len(projects)} Projekte zur√ºck")
            for i, project in enumerate(projects):
                print(f"   - {i+1}. {project.get('name', 'N/A')} (ID: {project.get('id', 'N/A')})")
        elif response.status_code == 401:
            print("   ‚ùå Token abgelaufen - Neue Anmeldung erforderlich")
        else:
            print(f"   ‚ùå Fehler: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå API-Fehler: {e}")
    
    print("\nüí° EMPFEHLUNGEN:")
    print("   1. Backend-Logs pr√ºfen f√ºr Debug-Ausgaben")
    print("   2. Neues Projekt erstellen und Logs beobachten")
    print("   3. Datenbank nach Projekt-Erstellung pr√ºfen")
    print("   4. Browser-Cache leeren")
    print("   5. Neuen Login-Token generieren")

if __name__ == "__main__":
    debug_database_write() 