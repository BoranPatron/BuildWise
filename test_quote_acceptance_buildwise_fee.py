#!/usr/bin/env python3
"""
Test Quote Acceptance BuildWise Fee Creation
===========================================

Testet die automatische Erstellung von BuildWise-Geb√ºhren bei Quote-Akzeptierung.
"""

import asyncio
import os
import sys
from datetime import datetime

# F√ºge das Projektverzeichnis zum Python-Pfad hinzu
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_db
from app.core.config import settings
from app.models.quote import Quote, QuoteStatus
from app.models.buildwise_fee import BuildWiseFee
from app.models.cost_position import CostPosition
from app.services.quote_service import accept_quote, get_quote_by_id
from app.services.buildwise_fee_service import BuildWiseFeeService


class QuoteAcceptanceTester:
    """Testet die Quote-Akzeptierung und BuildWise-Geb√ºhren-Erstellung."""
    
    def __init__(self):
        self.test_results = []
    
    async def test_environment_configuration(self):
        """Testet die Environment-Konfiguration."""
        print("üß™ Teste Environment-Konfiguration...")
        
        current_mode = settings.environment_mode.value
        current_fee_percentage = settings.get_current_fee_percentage()
        
        print(f"üéØ Aktuelle Konfiguration:")
        print(f"   - Modus: {current_mode}")
        print(f"   - Geb√ºhren: {current_fee_percentage}%")
        print(f"   - Ist Beta: {settings.is_beta_mode()}")
        print(f"   - Ist Production: {settings.is_production_mode()}")
        
        self.test_results.append({
            'test': 'Environment Configuration',
            'status': 'PASS',
            'details': f"Modus: {current_mode}, Geb√ºhren: {current_fee_percentage}%"
        })
    
    async def find_accepted_quotes(self, db):
        """Findet akzeptierte Angebote ohne BuildWise-Geb√ºhren."""
        print("\nüîç Suche nach akzeptierten Angeboten...")
        
        from sqlalchemy import select, and_
        
        # Hole alle akzeptierten Angebote
        query = select(Quote).where(Quote.status == QuoteStatus.ACCEPTED)
        result = await db.execute(query)
        accepted_quotes = result.scalars().all()
        
        print(f"üìä Gefundene akzeptierte Angebote: {len(accepted_quotes)}")
        
        quotes_without_fees = []
        for quote in accepted_quotes:
            # Pr√ºfe ob bereits eine BuildWise-Geb√ºhr existiert
            fee_query = select(BuildWiseFee).where(BuildWiseFee.quote_id == quote.id)
            fee_result = await db.execute(fee_query)
            existing_fee = fee_result.scalar_one_or_none()
            
            if not existing_fee:
                quotes_without_fees.append(quote)
                print(f"   ‚ùå Quote ID {quote.id}: Keine BuildWise-Geb√ºhr vorhanden")
            else:
                print(f"   ‚úÖ Quote ID {quote.id}: BuildWise-Geb√ºhr vorhanden (ID: {existing_fee.id})")
        
        return quotes_without_fees
    
    async def test_manual_fee_creation(self, db, quote_id):
        """Testet die manuelle Erstellung einer BuildWise-Geb√ºhr."""
        print(f"\nüß™ Teste manuelle Geb√ºhren-Erstellung f√ºr Quote {quote_id}...")
        
        try:
            # Hole das Quote
            quote = await get_quote_by_id(db, quote_id)
            if not quote:
                print(f"‚ùå Quote {quote_id} nicht gefunden")
                return False
            
            print(f"üìã Quote Details:")
            print(f"   - ID: {quote.id}")
            print(f"   - Status: {quote.status}")
            print(f"   - Betrag: {quote.total_amount}‚Ç¨")
            print(f"   - Projekt: {quote.project_id}")
            
            # Hole die zugeh√∂rige Kostenposition
            from sqlalchemy import select
            cost_position_query = select(CostPosition).where(CostPosition.quote_id == quote.id)
            cost_position_result = await db.execute(cost_position_query)
            cost_position = cost_position_result.scalar_one_or_none()
            
            if not cost_position:
                print(f"‚ùå Keine Kostenposition f√ºr Quote {quote_id} gefunden")
                return False
            
            print(f"üìã Kostenposition Details:")
            print(f"   - ID: {cost_position.id}")
            print(f"   - Titel: {cost_position.title}")
            print(f"   - Betrag: {cost_position.amount}‚Ç¨")
            
            # Erstelle BuildWise-Geb√ºhr
            print(f"üí∞ Erstelle BuildWise-Geb√ºhr...")
            fee = await BuildWiseFeeService.create_fee_from_quote(
                db=db,
                quote_id=quote.id,
                cost_position_id=cost_position.id
            )
            
            print(f"‚úÖ BuildWise-Geb√ºhr erfolgreich erstellt:")
            print(f"   - ID: {fee.id}")
            print(f"   - Prozentsatz: {fee.fee_percentage}%")
            print(f"   - Betrag: {fee.fee_amount}‚Ç¨")
            print(f"   - Environment-Modus: {settings.environment_mode.value}")
            
            self.test_results.append({
                'test': f'Manual Fee Creation (Quote {quote_id})',
                'status': 'PASS',
                'details': f"Geb√ºhr erstellt: {fee.fee_percentage}% = {fee.fee_amount}‚Ç¨"
            })
            
            return True
            
        except Exception as e:
            print(f"‚ùå Fehler bei manueller Geb√ºhren-Erstellung: {e}")
            self.test_results.append({
                'test': f'Manual Fee Creation (Quote {quote_id})',
                'status': 'FAIL',
                'details': str(e)
            })
            return False
    
    async def test_quote_acceptance_flow(self, db):
        """Testet den kompletten Quote-Akzeptierungs-Flow."""
        print(f"\nüß™ Teste Quote-Akzeptierungs-Flow...")
        
        try:
            # Finde ein Quote zum Testen (erstes verf√ºgbares)
            from sqlalchemy import select
            query = select(Quote).where(Quote.status == QuoteStatus.SUBMITTED).limit(1)
            result = await db.execute(query)
            test_quote = result.scalar_one_or_none()
            
            if not test_quote:
                print("‚ùå Kein Quote zum Testen gefunden")
                self.test_results.append({
                    'test': 'Quote Acceptance Flow',
                    'status': 'SKIP',
                    'details': 'Kein Quote zum Testen verf√ºgbar'
                })
                return
            
            print(f"üìã Teste mit Quote ID {test_quote.id}:")
            print(f"   - Titel: {test_quote.title}")
            print(f"   - Status: {test_quote.status}")
            print(f"   - Betrag: {test_quote.total_amount}‚Ç¨")
            
            # Pr√ºfe ob bereits eine BuildWise-Geb√ºhr existiert
            fee_query = select(BuildWiseFee).where(BuildWiseFee.quote_id == test_quote.id)
            fee_result = await db.execute(fee_query)
            existing_fee = fee_result.scalar_one_or_none()
            
            if existing_fee:
                print(f"   ‚ö†Ô∏è  Bereits eine BuildWise-Geb√ºhr vorhanden (ID: {existing_fee.id})")
                self.test_results.append({
                    'test': 'Quote Acceptance Flow',
                    'status': 'INFO',
                    'details': f"Bereits Geb√ºhr vorhanden f√ºr Quote {test_quote.id}"
                })
                return
            
            # Simuliere Quote-Akzeptierung
            print(f"üîÑ Simuliere Quote-Akzeptierung...")
            accepted_quote = await accept_quote(db, test_quote.id)
            
            if not accepted_quote:
                print(f"‚ùå Quote-Akzeptierung fehlgeschlagen")
                self.test_results.append({
                    'test': 'Quote Acceptance Flow',
                    'status': 'FAIL',
                    'details': 'Quote-Akzeptierung fehlgeschlagen'
                })
                return
            
            print(f"‚úÖ Quote erfolgreich akzeptiert")
            
            # Pr√ºfe ob BuildWise-Geb√ºhr erstellt wurde
            fee_query = select(BuildWiseFee).where(BuildWiseFee.quote_id == test_quote.id)
            fee_result = await db.execute(fee_query)
            new_fee = fee_result.scalar_one_or_none()
            
            if new_fee:
                print(f"‚úÖ BuildWise-Geb√ºhr automatisch erstellt:")
                print(f"   - ID: {new_fee.id}")
                print(f"   - Prozentsatz: {new_fee.fee_percentage}%")
                print(f"   - Betrag: {new_fee.fee_amount}‚Ç¨")
                
                self.test_results.append({
                    'test': 'Quote Acceptance Flow',
                    'status': 'PASS',
                    'details': f"Geb√ºhr automatisch erstellt: {new_fee.fee_percentage}% = {new_fee.fee_amount}‚Ç¨"
                })
            else:
                print(f"‚ùå BuildWise-Geb√ºhr wurde nicht automatisch erstellt")
                self.test_results.append({
                    'test': 'Quote Acceptance Flow',
                    'status': 'FAIL',
                    'details': 'BuildWise-Geb√ºhr nicht automatisch erstellt'
                })
                
        except Exception as e:
            print(f"‚ùå Fehler im Quote-Akzeptierungs-Flow: {e}")
            self.test_results.append({
                'test': 'Quote Acceptance Flow',
                'status': 'ERROR',
                'details': str(e)
            })
    
    def print_summary(self):
        """Zeigt eine Zusammenfassung der Test-Ergebnisse."""
        print("\n" + "=" * 60)
        print("üìä Quote Acceptance BuildWise Fee Test - Zusammenfassung")
        print("=" * 60)
        
        passed = sum(1 for result in self.test_results if result['status'] == 'PASS')
        failed = sum(1 for result in self.test_results if result['status'] == 'FAIL')
        errors = sum(1 for result in self.test_results if result['status'] == 'ERROR')
        skipped = sum(1 for result in self.test_results if result['status'] in ['SKIP', 'INFO'])
        
        print(f"‚úÖ Bestanden: {passed}")
        print(f"‚ùå Fehlgeschlagen: {failed}")
        print(f"‚ö†Ô∏è  Fehler: {errors}")
        print(f"‚ÑπÔ∏è  √úbersprungen: {skipped}")
        
        print("\nüìã Detaillierte Ergebnisse:")
        for result in self.test_results:
            status_icon = "‚úÖ" if result['status'] == 'PASS' else "‚ùå" if result['status'] == 'FAIL' else "‚ö†Ô∏è" if result['status'] == 'ERROR' else "‚ÑπÔ∏è"
            print(f"   {status_icon} {result['test']}: {result['details']}")
        
        if failed == 0 and errors == 0:
            print("\nüéâ Alle Tests erfolgreich! BuildWise-Geb√ºhren werden korrekt erstellt.")
        else:
            print(f"\n‚ö†Ô∏è  {failed + errors} Tests fehlgeschlagen. Bitte Probleme beheben.")


async def main():
    """Hauptfunktion f√ºr Quote-Akzeptierungs-Tests."""
    print("üèóÔ∏è  Quote Acceptance BuildWise Fee Tester")
    print("=" * 60)
    
    tester = QuoteAcceptanceTester()
    
    try:
        async for db in get_db():
            try:
                await tester.test_environment_configuration()
                
                # Teste bestehende akzeptierte Angebote
                quotes_without_fees = await tester.find_accepted_quotes(db)
                
                if quotes_without_fees:
                    print(f"\nüîß {len(quotes_without_fees)} akzeptierte Angebote ohne BuildWise-Geb√ºhren gefunden")
                    
                    # Teste manuelle Geb√ºhren-Erstellung f√ºr das erste Quote
                    first_quote = quotes_without_fees[0]
                    await tester.test_manual_fee_creation(db, first_quote.id)
                else:
                    print("\n‚úÖ Alle akzeptierten Angebote haben bereits BuildWise-Geb√ºhren")
                
                # Teste Quote-Akzeptierungs-Flow
                await tester.test_quote_acceptance_flow(db)
                
                tester.print_summary()
                
            finally:
                await db.close()
                
    except Exception as e:
        print(f"‚ùå Test fehlgeschlagen: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 