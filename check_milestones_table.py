#!/usr/bin/env python3
"""
√úberpr√ºfung der milestones Tabelle
"""

import sqlite3
import os

def check_milestones_table():
    """√úberpr√ºft die milestones Tabelle"""
    print("üîç √úberpr√ºfe milestones Tabelle...")
    
    if not os.path.exists('buildwise.db'):
        print("‚ùå Datenbank buildwise.db nicht gefunden!")
        return
    
    print("‚úÖ Datenbank buildwise.db gefunden")
    
    conn = sqlite3.connect('buildwise.db')
    cursor = conn.cursor()
    
    try:
        # Pr√ºfe milestones Tabelle
        cursor.execute("SELECT COUNT(*) FROM milestones")
        milestones_count = cursor.fetchone()[0]
        print(f"üìä Milestones in der Datenbank: {milestones_count}")
        
        if milestones_count > 0:
            print("\nüìã Milestones Details:")
            cursor.execute("""
                SELECT id, title, description, status, priority, project_id, planned_date, created_at
                FROM milestones
                ORDER BY created_at DESC
                LIMIT 5
            """)
            milestones = cursor.fetchall()
            
            for milestone in milestones:
                print(f"  - ID {milestone[0]}: '{milestone[1]}' (Status: {milestone[3]}, Priorit√§t: {milestone[4]}, Projekt: {milestone[5]})")
        
        # Pr√ºfe quotes Tabelle
        cursor.execute("SELECT COUNT(*) FROM quotes")
        quotes_count = cursor.fetchone()[0]
        print(f"\nüìä Quotes in der Datenbank: {quotes_count}")
        
        # Pr√ºfe cost_positions Tabelle
        cursor.execute("SELECT COUNT(*) FROM cost_positions")
        cost_positions_count = cursor.fetchone()[0]
        print(f"üìä CostPositions in der Datenbank: {cost_positions_count}")
        
        # Pr√ºfe Projekte
        cursor.execute("SELECT COUNT(*) FROM projects")
        projects_count = cursor.fetchone()[0]
        print(f"üìä Projekte in der Datenbank: {projects_count}")
        
        if projects_count > 0:
            print("\nüìã Projekte Details:")
            cursor.execute("SELECT id, name, description FROM projects LIMIT 3")
            projects = cursor.fetchall()
            
            for project in projects:
                print(f"  - Projekt {project[0]}: '{project[1]}'")
        
        # Pr√ºfe Verbindung zwischen Milestones und Projekten
        if milestones_count > 0 and projects_count > 0:
            print("\nüîó Milestone-Projekt-Verbindung:")
            cursor.execute("""
                SELECT m.id, m.title, p.name as project_name
                FROM milestones m
                JOIN projects p ON m.project_id = p.id
                ORDER BY m.created_at DESC
                LIMIT 3
            """)
            connections = cursor.fetchall()
            
            for conn in connections:
                print(f"  - Milestone {conn[0]} ('{conn[1]}') -> Projekt: '{conn[2]}'")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Fehler bei der √úberpr√ºfung: {e}")
        import traceback
        traceback.print_exc()
        conn.close()

if __name__ == "__main__":
    check_milestones_table() 