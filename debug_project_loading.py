#!/usr/bin/env python3
"""
√úberpr√ºft die Projekt-Ladung im Backend
"""

import requests
import json

def debug_project_loading():
    """√úberpr√ºft die Projekt-Ladung im Backend"""
    print("üîç PROJEKT-LADUNG DEBUG")
    print("=" * 40)
    
    base_url = "http://localhost:8000"
    
    # Admin-Token (m√∂glicherweise abgelaufen)
    headers = {
        "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBidWlsZHdpc2UuZGUiLCJleHAiOjE3NTI5NDY2OTh9.QybsYBe-4RUGdICzDAplsIzxmuaDGHTLMp5_k3YfKNA",
        "Content-Type": "application/json"
    }
    
    print("\nüìä BACKEND-VERF√úGBARKEIT:")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Backend erreichbar")
        else:
            print("   ‚ùå Backend nicht erreichbar")
    except Exception as e:
        print(f"   ‚ùå Backend-Fehler: {e}")
        return
    
    print("\nüîê TOKEN-VALIDIERUNG:")
    try:
        response = requests.get(f"{base_url}/api/v1/projects/", headers=headers)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            projects = response.json()
            print(f"   ‚úÖ Token g√ºltig - {len(projects)} Projekte gefunden")
            for i, project in enumerate(projects):
                print(f"   - {i+1}. {project.get('name', 'N/A')} (ID: {project.get('id', 'N/A')})")
        elif response.status_code == 401:
            print("   ‚ùå Token abgelaufen - Neue Anmeldung erforderlich")
        else:
            print(f"   ‚ùå Fehler: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Fehler: {e}")
    
    print("\nüé≠ MOCK-DATEN PR√úFUNG:")
    print("   üìã Suche nach Mock-Daten im Backend-Code...")
    
    # Pr√ºfe Backend-Code auf Mock-Daten
    backend_files = [
        "app/services/project_service.py",
        "app/api/projects.py",
        "app/main.py"
    ]
    
    for file_path in backend_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'mock' in content.lower() or 'test' in content.lower():
                    print(f"   ‚ö†Ô∏è  M√∂gliche Mock-Daten in: {file_path}")
        except FileNotFoundError:
            print(f"   ‚ùå Datei nicht gefunden: {file_path}")
    
    print("\nüí° EMPFEHLUNGEN:")
    print("   1. Browser-Cache leeren")
    print("   2. Neuen Login-Token generieren")
    print("   3. Backend-Mock-Daten entfernen")
    print("   4. Frontend-Backend-Synchronisation testen")

if __name__ == "__main__":
    debug_project_loading() 