"""Add user management features

Revision ID: add_user_management_features
Revises: fix_buildwise_fees_datetime_columns
Create Date: 2024-01-15 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_user_management_features'
down_revision = 'fix_buildwise_fees_datetime_columns'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Erstelle SubscriptionPlan Enum
    op.execute("CREATE TYPE subscriptionplan AS ENUM ('basis', 'pro')")
    
    # Erstelle UserStatus Enum (falls nicht vorhanden)
    op.execute("CREATE TYPE IF NOT EXISTS userstatus AS ENUM ('active', 'inactive', 'suspended', 'deleted', 'pending_verification')")
    
    # Füge neue Spalten zur users Tabelle hinzu
    op.add_column('users', sa.Column('subscription_plan', sa.Enum('basis', 'pro', name='subscriptionplan'), nullable=False, server_default='basis'))
    op.add_column('users', sa.Column('subscription_start_date', sa.Date(), nullable=True))
    op.add_column('users', sa.Column('subscription_end_date', sa.Date(), nullable=True))
    op.add_column('users', sa.Column('subscription_active', sa.Boolean(), nullable=False, server_default='true'))
    
    # E-Mail-Verifizierung
    op.add_column('users', sa.Column('email_verification_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('email_verification_sent_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True))
    
    # Erweiterte Firmendaten
    op.add_column('users', sa.Column('tax_id', sa.String(), nullable=True))
    op.add_column('users', sa.Column('vat_id', sa.String(), nullable=True))
    
    # Berechtigungen und Rollen
    op.add_column('users', sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('roles', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    
    # Aktualisiere Standard-Status
    op.execute("UPDATE users SET status = 'pending_verification' WHERE status = 'active' AND email_verified = false")
    op.execute("UPDATE users SET status = 'active' WHERE status = 'active' AND email_verified = true")
    
    # Setze Standard-Rollen und Berechtigungen für bestehende Benutzer
    op.execute("""
        UPDATE users 
        SET 
            roles = '["builder_basic"]',
            permissions = '{"view_trades": true, "view_documents": true, "visualize": true}'
        WHERE user_type = 'private' AND roles IS NULL
    """)
    
    op.execute("""
        UPDATE users 
        SET 
            roles = '["builder_pro"]',
            permissions = '{"view_trades": true, "create_projects": true, "manage_milestones": true, "view_documents": true, "visualize": true, "manage_quotes": true, "view_analytics": true, "manage_tasks": true, "view_finance": true}'
        WHERE user_type = 'professional' AND roles IS NULL
    """)
    
    op.execute("""
        UPDATE users 
        SET 
            roles = '["service_provider"]',
            permissions = '{"view_trades": true, "create_quotes": true, "view_projects": true, "view_milestones": true, "view_documents": true, "send_messages": true, "view_buildwise_fees": true}'
        WHERE user_type = 'service_provider' AND roles IS NULL
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Entferne neue Spalten
    op.drop_column('users', 'roles')
    op.drop_column('users', 'permissions')
    op.drop_column('users', 'vat_id')
    op.drop_column('users', 'tax_id')
    op.drop_column('users', 'email_verified_at')
    op.drop_column('users', 'email_verification_sent_at')
    op.drop_column('users', 'email_verification_token')
    op.drop_column('users', 'subscription_active')
    op.drop_column('users', 'subscription_end_date')
    op.drop_column('users', 'subscription_start_date')
    op.drop_column('users', 'subscription_plan')
    
    # Entferne Enums
    op.execute("DROP TYPE IF EXISTS subscriptionplan")
    
    # ### end Alembic commands ### 