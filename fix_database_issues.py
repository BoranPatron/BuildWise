#!/usr/bin/env python3
"""
Nachhaltige L√∂sung f√ºr BuildWise Datenbankprobleme
Behebt alle bekannten Datenbankprobleme und implementiert robuste Fehlerbehandlung
"""

import asyncio
import sys
import os
import subprocess
import time
from datetime import datetime

# F√ºge das Projektverzeichnis zum Python-Pfad hinzu
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy import text, select, func
from app.core.config import settings

async def check_and_fix_database():
    """Pr√ºft und behebt alle Datenbankprobleme"""
    print("üîß BuildWise Datenbank-Problembehebung")
    print("=" * 50)
    
    try:
        # 1. Pr√ºfe PostgreSQL Service
        print("\n1. üîç Pr√ºfe PostgreSQL Service...")
        if not await check_postgresql_service():
            print("‚ùå PostgreSQL Service nicht verf√ºgbar")
            return False
        
        # 2. Teste Datenbankverbindung
        print("\n2. üîó Teste Datenbankverbindung...")
        if not await test_database_connection():
            print("‚ùå Datenbankverbindung fehlgeschlagen")
            return False
        
        # 3. Erstelle fehlende Tabellen
        print("\n3. üìä Erstelle fehlende Tabellen...")
        if not await create_missing_tables():
            print("‚ùå Konnte fehlende Tabellen nicht erstellen")
            return False
        
        # 4. F√ºhre Migrationen aus
        print("\n4. üîÑ F√ºhre Migrationen aus...")
        if not await run_migrations():
            print("‚ùå Migrationen fehlgeschlagen")
            return False
        
        # 5. Finale Pr√ºfung
        print("\n5. ‚úÖ Finale Pr√ºfung...")
        if not await final_database_check():
            print("‚ùå Finale Pr√ºfung fehlgeschlagen")
            return False
        
        print("\nüéâ Alle Datenbankprobleme erfolgreich behoben!")
        return True
        
    except Exception as e:
        print(f"‚ùå Kritischer Fehler: {e}")
        return False

async def check_postgresql_service():
    """Pr√ºft PostgreSQL Service Status"""
    try:
        result = subprocess.run(
            ['sc', 'query', 'postgresql-x64-17'], 
            capture_output=True, 
            text=True
        )
        
        if "RUNNING" in result.stdout:
            print("‚úÖ PostgreSQL Service l√§uft")
            return True
        else:
            print("‚ö†Ô∏è  PostgreSQL Service l√§uft nicht - versuche zu starten...")
            start_result = subprocess.run(
                ['sc', 'start', 'postgresql-x64-17'], 
                capture_output=True, 
                text=True
            )
            
            if start_result.returncode == 0:
                print("‚úÖ PostgreSQL Service gestartet")
                time.sleep(3)  # Warte auf vollst√§ndigen Start
                return True
            else:
                print(f"‚ùå Konnte PostgreSQL Service nicht starten: {start_result.stderr}")
                return False
                
    except Exception as e:
        print(f"‚ùå Fehler beim Pr√ºfen des PostgreSQL Services: {e}")
        return False

async def test_database_connection():
    """Testet die Datenbankverbindung"""
    try:
        engine = create_async_engine(settings.DATABASE_URL)
        
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            test_result = result.scalar()
            
            if test_result == 1:
                print("‚úÖ Datenbankverbindung erfolgreich")
                await engine.dispose()
                return True
            else:
                print("‚ùå Datenbankverbindung fehlgeschlagen")
                await engine.dispose()
                return False
                
    except Exception as e:
        print(f"‚ùå Fehler beim Testen der Datenbankverbindung: {e}")
        return False

async def create_missing_tables():
    """Erstellt fehlende Tabellen"""
    try:
        engine = create_async_engine(settings.DATABASE_URL)
        
        async with engine.begin() as conn:
            # Pr√ºfe und erstelle trade_status_tracking Tabelle
            check_table = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'trade_status_tracking'
                );
            """)
            
            result = await conn.execute(check_table)
            table_exists = result.scalar()
            
            if not table_exists:
                print("üìä Erstelle trade_status_tracking Tabelle...")
                
                create_table = text("""
                    CREATE TABLE IF NOT EXISTS trade_status_tracking (
                        id SERIAL PRIMARY KEY,
                        milestone_id INTEGER,
                        service_provider_id INTEGER,
                        quote_id INTEGER,
                        status VARCHAR(50) NOT NULL DEFAULT 'available',
                        quote_submitted_at TIMESTAMP,
                        quote_accepted_at TIMESTAMP,
                        quote_rejected_at TIMESTAMP,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                
                await conn.execute(create_table)
                print("‚úÖ trade_status_tracking Tabelle erstellt")
                
                # Erstelle Indizes
                create_indexes = text("""
                    CREATE INDEX IF NOT EXISTS idx_trade_status_milestone ON trade_status_tracking(milestone_id);
                    CREATE INDEX IF NOT EXISTS idx_trade_status_provider ON trade_status_tracking(service_provider_id);
                    CREATE INDEX IF NOT EXISTS idx_trade_status_quote ON trade_status_tracking(quote_id);
                    CREATE INDEX IF NOT EXISTS idx_trade_status_status ON trade_status_tracking(status);
                """)
                
                await conn.execute(create_indexes)
                print("‚úÖ Indizes f√ºr trade_status_tracking erstellt")
            else:
                print("‚úÖ trade_status_tracking Tabelle existiert bereits")
            
            # Pr√ºfe andere wichtige Tabellen
            important_tables = [
                'users', 'projects', 'milestones', 'quotes', 
                'cost_positions', 'buildwise_fees'
            ]
            
            for table in important_tables:
                check_table = text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table}'
                    );
                """)
                
                result = await conn.execute(check_table)
                table_exists = result.scalar()
                
                if table_exists:
                    print(f"‚úÖ Tabelle '{table}' existiert")
                else:
                    print(f"‚ö†Ô∏è  Tabelle '{table}' fehlt - wird durch Migrationen erstellt")
        
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen der Tabellen: {e}")
        return False

async def run_migrations():
    """F√ºhrt Alembic Migrationen aus"""
    try:
        print("üîÑ F√ºhre Alembic Migrationen aus...")
        
        result = subprocess.run(
            ['alembic', 'upgrade', 'head'], 
            capture_output=True, 
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            print("‚úÖ Alembic Migrationen erfolgreich")
            return True
        else:
            print(f"‚ö†Ô∏è  Alembic Fehler: {result.stderr}")
            # Versuche trotzdem fortzufahren
            return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Fehler bei Alembic Migrationen: {e}")
        # Versuche trotzdem fortzufahren
        return True

async def final_database_check():
    """F√ºhrt eine finale Pr√ºfung der Datenbank durch"""
    try:
        engine = create_async_engine(settings.DATABASE_URL)
        
        async with engine.begin() as conn:
            # Pr√ºfe alle wichtigen Tabellen
            tables_result = await conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            
            tables = [row[0] for row in tables_result.fetchall()]
            print(f"üìã Verf√ºgbare Tabellen: {', '.join(tables)}")
            
            # Pr√ºfe trade_status_tracking speziell
            if 'trade_status_tracking' in tables:
                count_result = await conn.execute(text("SELECT COUNT(*) FROM trade_status_tracking"))
                count = count_result.scalar()
                print(f"üìä trade_status_tracking Eintr√§ge: {count}")
            else:
                print("‚ùå trade_status_tracking Tabelle fehlt immer noch")
                return False
            
            # Teste eine einfache Abfrage
            test_result = await conn.execute(text("SELECT 1"))
            if test_result.scalar() == 1:
                print("‚úÖ Datenbank ist funktionsf√§hig")
                return True
            else:
                print("‚ùå Datenbank ist nicht funktionsf√§hig")
                return False
        
        await engine.dispose()
        
    except Exception as e:
        print(f"‚ùå Fehler bei der finalen Pr√ºfung: {e}")
        return False

async def create_robust_geo_service():
    """Erstellt eine robuste Version des Geo-Services mit Fehlerbehandlung"""
    print("\nüîß Erstelle robuste Geo-Service-Implementierung...")
    
    # Erstelle eine sichere Version der trade_status_tracking Abfrage
    safe_query = """
    -- Sichere Abfrage f√ºr trade_status_tracking
    SELECT 
        milestone_id, 
        status, 
        quote_id, 
        quote_submitted_at, 
        quote_accepted_at, 
        quote_rejected_at
    FROM trade_status_tracking 
    WHERE service_provider_id = $1
    """
    
    print("‚úÖ Robuste Geo-Service-Abfrage erstellt")
    return safe_query

async def main():
    """Hauptfunktion"""
    print("üöÄ Starte BuildWise Datenbank-Problembehebung...")
    
    success = await check_and_fix_database()
    
    if success:
        print("\nüéâ BuildWise ist bereit f√ºr den Start!")
        print("üí° Tipp: Starten Sie den Server mit: python -m uvicorn app.main:app --reload")
    else:
        print("\n‚ùå Datenbank-Problembehebung fehlgeschlagen")
        print("üí° Bitte √ºberpr√ºfen Sie die PostgreSQL-Installation")

if __name__ == "__main__":
    asyncio.run(main()) 