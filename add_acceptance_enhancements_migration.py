#!/usr/bin/env python3
"""
Migration: Erweiterte Abnahme-Funktionalit√§t
- Checkliste-Daten
- Wiedervorlage-System
- Foto-Annotation f√ºr M√§ngel
"""

import sqlite3
import json
from datetime import datetime

def run_migration():
    """F√ºhrt die Migration f√ºr erweiterte Abnahme-Funktionalit√§t aus"""
    
    # Verbindung zur SQLite-Datenbank
    conn = sqlite3.connect('buildwise.db')
    cursor = conn.cursor()
    
    try:
        print("üîÑ Starte Migration: Erweiterte Abnahme-Funktionalit√§t...")
        
        # 1. Erweitere acceptances Tabelle
        print("üìã Erweitere acceptances Tabelle...")
        
        # Pr√ºfe ob Spalten bereits existieren
        cursor.execute("PRAGMA table_info(acceptances)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'checklist_data' not in columns:
            cursor.execute("ALTER TABLE acceptances ADD COLUMN checklist_data TEXT")
            print("‚úÖ checklist_data Spalte hinzugef√ºgt")
        
        if 'review_date' not in columns:
            cursor.execute("ALTER TABLE acceptances ADD COLUMN review_date DATE")
            print("‚úÖ review_date Spalte hinzugef√ºgt")
        
        if 'review_notes' not in columns:
            cursor.execute("ALTER TABLE acceptances ADD COLUMN review_notes TEXT")
            print("‚úÖ review_notes Spalte hinzugef√ºgt")
        
        # 2. Erweitere acceptance_defects Tabelle
        print("üîß Erweitere acceptance_defects Tabelle...")
        
        cursor.execute("PRAGMA table_info(acceptance_defects)")
        defect_columns = [column[1] for column in cursor.fetchall()]
        
        if 'photo_annotations' not in defect_columns:
            cursor.execute("ALTER TABLE acceptance_defects ADD COLUMN photo_annotations TEXT")
            print("‚úÖ photo_annotations Spalte hinzugef√ºgt")
        
        # 3. Teste die neuen Strukturen
        print("üß™ Teste neue Strukturen...")
        
        # Pr√ºfe ob neue Spalten verf√ºgbar sind
        cursor.execute("PRAGMA table_info(acceptances)")
        acceptance_columns = [column[1] for column in cursor.fetchall()]
        
        cursor.execute("PRAGMA table_info(acceptance_defects)")
        defect_columns = [column[1] for column in cursor.fetchall()]
        
        # Validiere neue Spalten
        required_acceptance_columns = ['checklist_data', 'review_date', 'review_notes']
        required_defect_columns = ['photo_annotations']
        
        for col in required_acceptance_columns:
            if col in acceptance_columns:
                print(f"‚úÖ {col} Spalte erfolgreich hinzugef√ºgt")
            else:
                raise Exception(f"‚ùå {col} Spalte fehlt")
        
        for col in required_defect_columns:
            if col in defect_columns:
                print(f"‚úÖ {col} Spalte erfolgreich hinzugef√ºgt")
            else:
                raise Exception(f"‚ùå {col} Spalte fehlt")
        
        print("‚úÖ Strukturtest erfolgreich")
        
        # Migration abschlie√üen
        conn.commit()
        print("‚úÖ Migration erfolgreich abgeschlossen!")
        
        # Zusammenfassung
        print("\nüìä Migration Zusammenfassung:")
        print("   ‚Ä¢ Checkliste-Daten f√ºr Vor-Ort Pr√ºfung hinzugef√ºgt")
        print("   ‚Ä¢ Wiedervorlage-System f√ºr Abnahme unter Vorbehalt implementiert")
        print("   ‚Ä¢ Foto-Annotation f√ºr M√§ngel-Dokumentation aktiviert")
        print("   ‚Ä¢ Alle Tests erfolgreich")
        
    except Exception as e:
        print(f"‚ùå Fehler bei Migration: {e}")
        conn.rollback()
        raise
    
    finally:
        conn.close()

if __name__ == "__main__":
    run_migration()