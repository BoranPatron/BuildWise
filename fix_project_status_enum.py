#!/usr/bin/env python3
"""
Fix Project Status Enum Script
Korrigiert alle Projekte mit ung√ºltigem Status 'active' auf 'PLANNING'
"""

import asyncio
import sys
import os
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# F√ºge das Projektverzeichnis zum Python-Pfad hinzu
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_database_url
from app.models.project import Project

async def fix_project_status_enum():
    """Korrigiert alle Projekte mit ung√ºltigem Status 'active'"""
    
    print("üîß Starte Projekt-Status-Enum-Korrektur...")
    
    # Erstelle Datenbankverbindung
    database_url = get_database_url()
    engine = create_async_engine(database_url, echo=False)
    
    async_session = sessionmaker(
        bind=engine, class_=AsyncSession, expire_on_commit=False
    )
    
    try:
        async with async_session() as session:
            # Finde alle Projekte mit ung√ºltigem Status 'active'
            result = await session.execute(
                text("SELECT id, name, status FROM projects WHERE status = 'active'")
            )
            projects_with_active_status = result.fetchall()
            
            if not projects_with_active_status:
                print("‚úÖ Keine Projekte mit ung√ºltigem Status 'active' gefunden.")
                return
            
            print(f"‚ö†Ô∏è  Gefunden: {len(projects_with_active_status)} Projekte mit ung√ºltigem Status 'active'")
            
            # Zeige betroffene Projekte
            for project in projects_with_active_status:
                print(f"   - Projekt {project.id}: '{project.name}' (Status: {project.status})")
            
            # Korrigiere alle Projekte auf 'PLANNING'
            await session.execute(
                text("UPDATE projects SET status = 'PLANNING' WHERE status = 'active'")
            )
            
            await session.commit()
            
            print("‚úÖ Alle Projekte erfolgreich auf Status 'PLANNING' korrigiert!")
            
            # Best√§tige die √Ñnderungen
            result = await session.execute(
                text("SELECT id, name, status FROM projects WHERE status = 'PLANNING'")
            )
            updated_projects = result.fetchall()
            
            print(f"üìä Aktualisierte Projekte:")
            for project in updated_projects:
                print(f"   - Projekt {project.id}: '{project.name}' (Status: {project.status})")
                
    except Exception as e:
        print(f"‚ùå Fehler beim Korrigieren der Projekt-Status: {e}")
        raise
    finally:
        await engine.dispose()

async def check_project_statuses():
    """Pr√ºft alle Projekt-Status in der Datenbank"""
    
    print("üîç Pr√ºfe alle Projekt-Status...")
    
    database_url = get_database_url()
    engine = create_async_engine(database_url, echo=False)
    
    async_session = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )
    
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT id, name, status FROM projects ORDER BY id")
            )
            projects = result.fetchall()
            
            if not projects:
                print("‚ÑπÔ∏è  Keine Projekte in der Datenbank gefunden.")
                return
            
            print(f"üìä Gefunden: {len(projects)} Projekte")
            print("Status-√úbersicht:")
            
            status_count = {}
            for project in projects:
                status = project.status
                status_count[status] = status_count.get(status, 0) + 1
                print(f"   - Projekt {project.id}: '{project.name}' (Status: {status})")
            
            print("\nüìà Status-Verteilung:")
            for status, count in status_count.items():
                print(f"   - {status}: {count} Projekte")
                
    except Exception as e:
        print(f"‚ùå Fehler beim Pr√ºfen der Projekt-Status: {e}")
        raise
    finally:
        await engine.dispose()

async def main():
    """Hauptfunktion"""
    print("üöÄ BuildWise - Projekt-Status-Enum-Korrektur")
    print("=" * 50)
    
    try:
        # Pr√ºfe aktuelle Status
        await check_project_statuses()
        print("\n" + "=" * 50)
        
        # Korrigiere ung√ºltige Status
        await fix_project_status_enum()
        print("\n" + "=" * 50)
        
        # Pr√ºfe Status nach Korrektur
        await check_project_statuses()
        
        print("\n‚úÖ Projekt-Status-Enum-Korrektur erfolgreich abgeschlossen!")
        
    except Exception as e:
        print(f"‚ùå Fehler: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 